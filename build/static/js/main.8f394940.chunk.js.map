{"version":3,"sources":["Configuration/ThemeSelectorForm.js","Configuration/Review.js","Configuration/BlindtestCustomizerForm.js","Configuration/Checkout.js","Generator/SelectionGenerator.js","Session/KeyboardEvent.js","Session/PlaylistManager.js","Session/BlindtestGenerator.js","RoutingConfig.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeSelectorForm","props","theme","window","localStorage","getItem","defaultTheme","state","opened","classes","makeStyles","button","display","marginTop","spacing","select","backgroundColor","borderColor","icon","fill","formControl","margin","minWidth","setOpen","bind","handleOpen","handleClose","handleChange","event","setItem","target","value","this","setState","Fragment","Typography","variant","gutterBottom","align","style","color","Box","FormControl","Select","labelId","id","open","onClose","onOpen","onChange","defaultValue","inputProps","MenuItem","React","Component","ThemeList","games","animes","film","getTheme","key","allowSameLicence","getFormattedPlaylistSize","playlistSize","getFormattedGuessTime","guessTime","waitTime","Review","Grid","container","item","xs","GreenSwitch","withStyles","switchBase","checked","track","Switch","CustomSlider","root","height","borderRadius","thumb","width","border","boxShadow","active","Slider","BlindtestCustomizerForm","parseInt","defaultplaylistSize","defaultGuessTime","defaultWaitTime","updatePlaylistSize","updateGuessTime","updateWaitTime","handleSwitchChange","newPlaylistSize","toString","actualGuessTime","newGuessTime","innerText","actualWaitTime","newWaitTime","component","FormGroup","FormLabel","TextField","type","min","textAlign","name","marginBottom","getAriaValueText","valuetext","aria-labelledby","valueLabelDisplay","step","marks","max","Copyright","position","bottom","left","transform","Link","href","Date","getFullYear","QontoConnector","alternativeLabel","top","right","completed","line","borderTopWidth","StepConnector","useQontoStepIconStyles","alignItems","circle","zIndex","fontSize","QontoStepIcon","className","clsx","steps","Checkout","activeStep","anchorEl","openedHelp","setActiveStep","setAnchorEl","handleMenu","handleBack","handleNext","startBlindtest","Error","history","push","anchor","Boolean","currentTarget","overflow","Helmet","bodyAttributes","CssBaseline","AppBar","flex","Toolbar","noWrap","marginLeft","IconButton","edge","aria-label","aria-controls","aria-haspopup","onClick","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","List","ListItem","Stepper","connector","map","label","Step","StepLabel","StepIconComponent","getStepContent","Button","length","require","random","Random","MersenneTwister19937","autoSeed","anime","GenerateSelectionFromJSON","size","reuseGame","assets","shuffle","flatMappedAssets","asset","url","link","split","start","flat","FlatMapAssets","slice","winnerChoice","KeyboardEvents","HandleVolumeDown","player","volume","getVolume","setVolume","HandleVolumeUp","HandlePause","status","getPlayerState","pauseVideo","playVideo","PlaylistManager","playlist","updatePlayer","shift","timeoutCounter","loaded","error","Promise","resolve","reject","music","opt","screen","playerVars","autoplay","end","answerTime","fs","origin","location","console","log","videoId","opts","onReady","_onReady","onPlay","_onPlay","onError","_onError","onStateChange","_onStateChange","timer","setInterval","clearInterval","playlistIndex","alert","data","stopVideo","Status","BlindtestGenerator","doneAction","nextGuess","counter","checkStatus","playlistManager","startGuessTime","startAnswerTime","handleKeyDown","then","catch","fontWeight","handleKeys","onKeyEvent","RoutingConfig","basename","exact","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f394940.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport default class ThemeSelectorForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const theme = window.localStorage.getItem('theme')\r\n\r\n        this.defaultTheme = theme ? theme : 'games'\r\n\r\n        this.state = {\r\n            opened: false,\r\n            theme: this.defaultTheme,\r\n            classes:  makeStyles((theme) => ({\r\n                button: {\r\n                    display: 'block',\r\n                    marginTop: theme.spacing(2),\r\n                },\r\n                select: {\r\n                    backgroundColor: 'white',\r\n                    '&:before': {\r\n                        borderColor: '#eaeaf0',\r\n                    },\r\n                    '&:after': {\r\n                        borderColor: '#0FDC06',\r\n                    }\r\n                },\r\n                icon: {\r\n                    fill: '#0FDC06',\r\n                },\r\n                formControl: {\r\n                    margin: theme.spacing(1),\r\n                    minWidth: 120,\r\n                },\r\n            }))\r\n        }\r\n\r\n        this.setOpen = this.setOpen.bind(this);\r\n        this.handleOpen = this.handleOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        window.localStorage.setItem('theme', event.target.value);\r\n        this.setState({\r\n            theme: event.target.value\r\n        })\r\n    };\r\n\r\n    setOpen(state) {\r\n        this.setState({\r\n            opened: state\r\n        })\r\n    }\r\n\r\n    handleClose() {\r\n        this.setOpen(false);\r\n    }\r\n\r\n    handleOpen() {\r\n        this.setOpen(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Typography variant=\"h6\" gutterBottom align='center' style={{ color: 'white'}}>\r\n                    Select Theme\r\n                </Typography>\r\n                <Box align='center'>\r\n                    <FormControl style={{ marginTop: '10%', minWidth: 300 }}>\r\n                        <Select\r\n                            labelId=\"demo-controlled-open-select-label\"\r\n                            id=\"demo-controlled-open-select\"\r\n                            open={this.state.open}\r\n                            onClose={this.handleClose}\r\n                            onOpen={this.handleOpen}\r\n                            value={this.state.theme}\r\n                            onChange={this.handleChange}\r\n                            defaultValue={this.defaultTheme}\r\n                            inputProps={{\r\n                                style: {\r\n                                    color: 'white'\r\n                                },\r\n                                classes: {\r\n                                    icon: this.state.classes.icon\r\n                                }\r\n                            }}\r\n                        >\r\n                            <MenuItem value=\"\"><em>None</em></MenuItem>\r\n                            <MenuItem value='games'>Video Games</MenuItem>\r\n                            <MenuItem value='animes'>Anime</MenuItem>\r\n                            <MenuItem value='film'>Films</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Box>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n    Typography,\r\n    Grid\r\n} from \"@material-ui/core\"\r\n\r\nconst ThemeList = {\r\n    games: \"Video Games\",\r\n    animes: \"Animes\",\r\n    film: \"Movies\"\r\n}\r\n\r\nfunction getTheme() {\r\n    const key = window.localStorage.getItem('theme')\r\n    const allowSameLicence = (window.localStorage.getItem('allow_same_licence') === 'true')\r\n\r\n    const result = `${ThemeList[key]} (${allowSameLicence ? 'Multiple selection per Licence' : 'One selection per Licence'})`\r\n    return result;\r\n}\r\n\r\nfunction getFormattedPlaylistSize() {\r\n    const playlistSize = window.localStorage.getItem('playlist_size');\r\n\r\n    return `${playlistSize} elements in this playlist`;\r\n}\r\n\r\nfunction getFormattedGuessTime() {\r\n    const guessTime = window.localStorage.getItem('guess_time');\r\n    const waitTime = window.localStorage.getItem('wait_time');\r\n\r\n    return `${guessTime} sec to guess then ${waitTime} before next guess`;\r\n}\r\n\r\nexport default function Review() {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" gutterBottom align='center' style={{ color: 'white' }}>\r\n                Configuration summary\r\n            </Typography>\r\n            <Typography variant=\"h6\" gutterBottom align='center'>\r\n                <Grid container spacing={5} style={{ marginTop: '5%' }}>\r\n                    <React.Fragment key=\"Theme\">\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom style={{ color: 'white' }}>Theme</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom style={{ color: 'white' }}>{getTheme()}</Typography>\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                    <React.Fragment key=\"Size of Playlist\">\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom style={{ color: 'white' }}>Size of Playlist</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom style={{ color: 'white' }}>{getFormattedPlaylistSize()}</Typography>\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                    <React.Fragment key=\"Guess Time\">\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom style={{ color: 'white' }}>Guess/Answer Time</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom style={{ color: 'white' }}>{getFormattedGuessTime()}</Typography>\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                </Grid>\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Typography,\r\n    TextField,\r\n    FormControl,\r\n    Slider,\r\n    Box,\r\n    FormLabel,\r\n    Switch,\r\n    FormGroup\r\n} from \"@material-ui/core\"\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst GreenSwitch = withStyles({\r\n    switchBase: {\r\n        color: '#0CB804',\r\n        '&$checked': {\r\n            color: '#0CB804',\r\n        },\r\n        '&$checked + $track': {\r\n            backgroundColor: '#48DF40',\r\n        },\r\n    },\r\n    checked: {},\r\n    track: {},\r\n})(Switch);\r\n\r\nconst CustomSlider = withStyles({\r\n    root: {\r\n        color: \"#137E0E\"\r\n    },\r\n    track: {\r\n        height: 3,\r\n        borderRadius: 2,\r\n    },\r\n    thumb: {\r\n        height: 15,\r\n        width: 15,\r\n        backgroundColor: \"#0CB804\",\r\n        border: \"2px solid currentColor\",\r\n        \"&:focus, &:hover, &$active\": {\r\n            boxShadow: \"#137E0E 0 2px 3px 1px\",\r\n        },\r\n        color: \"#0CB804\",\r\n    },\r\n    active: {}\r\n})(Slider);\r\n\r\nexport default class BlindtestCustomizerForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const playlistSize = parseInt(window.localStorage.getItem('playlist_size'))\r\n        const guessTime = parseInt(window.localStorage.getItem('guess_time'))\r\n        const waitTime = parseInt(window.localStorage.getItem('wait_time'))\r\n        const allowSameLicence = (window.localStorage.getItem('allow_same_licence') === 'true')\r\n\r\n        this.defaultplaylistSize = playlistSize ? playlistSize : 100\r\n        this.defaultGuessTime = guessTime ? guessTime : 13\r\n        this.defaultWaitTime = waitTime ? waitTime : 5\r\n\r\n        this.state = {\r\n            opened: false,\r\n            playlistSize: this.defaultplaylistSize,\r\n            guessTime: this.defaultGuessTime,\r\n            waitTime: this.defaultWaitTime,\r\n            allowSameLicence: allowSameLicence,\r\n            classes:  makeStyles((theme) => ({\r\n                formControl: {\r\n                    margin: theme.spacing(1),\r\n                    minWidth: 120,\r\n                }\r\n            }))\r\n        }\r\n\r\n        this.updatePlaylistSize = this.updatePlaylistSize.bind(this);\r\n        this.updateGuessTime = this.updateGuessTime.bind(this);\r\n        this.updateWaitTime = this.updateWaitTime.bind(this);\r\n        this.handleSwitchChange = this.handleSwitchChange.bind(this);\r\n    }\r\n\r\n    valuetext(value) {\r\n        return `${value}`;\r\n    }\r\n\r\n    updatePlaylistSize(event) {\r\n        const newPlaylistSize = parseInt(event.target.value)\r\n\r\n        if (!newPlaylistSize) {\r\n            window.localStorage.setItem('playlist_size', '0');\r\n        }\r\n        this.setState({\r\n            playlistSize: newPlaylistSize\r\n        })\r\n        window.localStorage.setItem('playlist_size', !newPlaylistSize ? '0' : newPlaylistSize.toString())\r\n    }\r\n\r\n    updateGuessTime(event) {\r\n        const actualGuessTime = this.state.guessTime\r\n        const newGuessTime = parseInt(event.target.innerText)\r\n\r\n        if (newGuessTime && actualGuessTime !== newGuessTime) {\r\n            this.setState({\r\n                guessTime: newGuessTime\r\n            })\r\n            window.localStorage.setItem('guess_time', newGuessTime.toString());\r\n        }\r\n    }\r\n\r\n    updateWaitTime(event) {\r\n        const actualWaitTime = this.state.waitTime\r\n        const newWaitTime = parseInt(event.target.innerText)\r\n\r\n\r\n        if (newWaitTime && actualWaitTime !== newWaitTime) {\r\n            this.setState({\r\n                waitTime: newWaitTime\r\n            })\r\n            window.localStorage.setItem('wait_time', newWaitTime.toString());\r\n        }\r\n    }\r\n\r\n    handleSwitchChange(event) {\r\n        window.localStorage.setItem('allow_same_licence', event.target.checked.toString())\r\n        this.setState({\r\n            allowSameLicence: event.target.checked\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Typography variant=\"h6\" align='center' style={{ color: 'white' }}>\r\n                    Customize Blindtest\r\n                </Typography>\r\n                <Box align='center'>\r\n                    <FormControl component=\"fieldset\" style={{ marginTop: '5%' }}>\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\" style={{ color: '#DCDDDC' }}>\r\n                                Size of Playlist\r\n                            </FormLabel>\r\n                            <TextField\r\n                                type=\"number\"\r\n                                inputProps={{min: 0, style: { textAlign: 'center', color: 'white' }}}\r\n                                value={this.state.playlistSize}\r\n                                onChange={this.updatePlaylistSize}\r\n                                name=\"numberformat\"\r\n                                id=\"formatted-numberformat-input\"\r\n\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\" style={{ marginBottom: '40px', marginTop: '40px', color: '#DCDDDC' }}>\r\n                                Guess Time\r\n                            </FormLabel>\r\n                            <CustomSlider\r\n                                defaultValue={this.defaultGuessTime}\r\n                                onChange={this.updateGuessTime}\r\n                                getAriaValueText={this.valuetext}\r\n                                aria-labelledby=\"discrete-slider\"\r\n                                valueLabelDisplay=\"on\"\r\n                                step={1}\r\n                                marks\r\n                                min={5}\r\n                                max={20}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\" style={{ marginBottom: '40px', marginTop: '40px', color: '#DCDDDC' }}>\r\n                                Time before next Guess\r\n                            </FormLabel>\r\n                            <CustomSlider\r\n                                defaultValue={this.defaultWaitTime}\r\n                                onChange={this.updateWaitTime}\r\n                                getAriaValueText={this.valuetext}\r\n                                aria-labelledby=\"discrete-slider\"\r\n                                valueLabelDisplay=\"on\"\r\n                                step={1}\r\n                                marks\r\n                                min={1}\r\n                                max={10}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\" style={{ marginTop: '40px', color: '#DCDDDC' }}>Allow multiple selection per Licence</FormLabel>\r\n                            <Box align='center'>\r\n                                <GreenSwitch checked={this.state.allowSameLicence} onChange={this.handleSwitchChange} name=\"allow-same_licence\"/>\r\n                            </Box>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </Box>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport ThemeSelectorForm from './ThemeSelectorForm';\r\nimport Review from './Review';\r\nimport clsx from \"clsx\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport PropTypes from \"prop-types\";\r\nimport BlindtestCustomizerForm from \"./BlindtestCustomizerForm\";\r\nimport HelpIcon from \"@material-ui/icons/Help\"\r\n\r\nimport {\r\n    CssBaseline,\r\n    AppBar,\r\n    Toolbar,\r\n    Stepper,\r\n    Step,\r\n    StepLabel,\r\n    Button,\r\n    Link,\r\n    Typography,\r\n    Box,\r\n    StepConnector,\r\n    List,\r\n    ListItem,\r\n    Menu,\r\n    IconButton\r\n} from \"@material-ui/core\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <div style={{\r\n            position: 'fixed',\r\n            bottom: '10px',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)'\r\n        }}>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" style={{\r\n                backgroundColor: '#282D35',\r\n                color: 'white'\r\n            }}>\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://github.com/Emolitt/blindtest-generator\">\r\n                    Emolitt\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\n//Progress Bar\r\nconst QontoConnector = withStyles({\r\n    alternativeLabel: {\r\n        top: 10,\r\n        left: 'calc(-50% + 16px)',\r\n        right: 'calc(50% + 16px)',\r\n    },\r\n    active: {\r\n        '& $line': {\r\n            borderColor: '#0FDC06',\r\n        },\r\n    },\r\n    completed: {\r\n        '& $line': {\r\n            borderColor: '#0FDC06',\r\n        },\r\n    },\r\n    line: {\r\n        borderColor: '#eaeaf0',\r\n        borderTopWidth: 3,\r\n        borderRadius: 1,\r\n    },\r\n})(StepConnector);\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n    root: {\r\n        color: '#eaeaf0',\r\n        display: 'flex',\r\n        height: 22,\r\n        alignItems: 'center',\r\n    },\r\n    active: {\r\n        color: '#0FDC06',\r\n    },\r\n    circle: {\r\n        width: 8,\r\n        height: 8,\r\n        borderRadius: '50%',\r\n        backgroundColor: 'currentColor',\r\n    },\r\n    completed: {\r\n        color: '#0FDC06',\r\n        zIndex: 1,\r\n        fontSize: 18,\r\n    },\r\n});\r\n\r\n\r\nfunction QontoStepIcon(props) {\r\n    const classes = useQontoStepIconStyles();\r\n    const { active, completed } = props;\r\n\r\n    return (\r\n        <div\r\n            className={clsx(classes.root, {\r\n                [classes.active]: active,\r\n            })}\r\n        >\r\n            {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n    /**\r\n     * Whether this step is active.\r\n     */\r\n    active: PropTypes.bool,\r\n    /**\r\n     * Mark the step as completed. Is passed to child components.\r\n     */\r\n    completed: PropTypes.bool,\r\n};\r\n\r\nconst steps = ['Select theme', 'Select Parameters', 'Validate'];\r\n\r\nexport default class Checkout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeStep: 0,\r\n            anchorEl: null,\r\n            openedHelp: false\r\n        }\r\n\r\n        this.setActiveStep = this.setActiveStep.bind(this);\r\n        this.setAnchorEl = this.setAnchorEl.bind(this);\r\n        this.handleMenu = this.handleMenu.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleBack = this.handleBack.bind(this);\r\n        this.handleNext = this.handleNext.bind(this);\r\n        this.startBlindtest = this.startBlindtest.bind(this);\r\n\r\n    }\r\n\r\n    getStepContent() {\r\n        const step = this.state.activeStep\r\n        switch (step) {\r\n            case 0:\r\n                return <ThemeSelectorForm />;\r\n            case 1:\r\n                return <BlindtestCustomizerForm />;\r\n            case 2:\r\n                return <Review />;\r\n            default:\r\n                throw new Error('Unknown step');\r\n        }\r\n    }\r\n\r\n    startBlindtest() {\r\n        this.props.history.push('/blindtest');\r\n    }\r\n\r\n    setActiveStep(step) {\r\n        this.setState({\r\n            activeStep: step\r\n        })\r\n    }\r\n\r\n    setAnchorEl(anchor) {\r\n        this.setState({\r\n            anchorEl: anchor,\r\n            openedHelp: Boolean(anchor)\r\n        })\r\n    }\r\n\r\n    handleNext() {\r\n        this.setActiveStep(this.state.activeStep + 1);\r\n    };\r\n\r\n    handleBack() {\r\n        this.setActiveStep(this.state.activeStep - 1);\r\n    };\r\n\r\n    handleMenu(event) {\r\n        this.setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    handleClose() {\r\n        this.setAnchorEl(null);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ overflow: 'hidden' }}>\r\n                <Helmet bodyAttributes={{style: 'background-color : #282D35'}}/>\r\n                <React.Fragment>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"absolute\" style={{backgroundColor : '#282D35', flex: 1}}>\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                                Blindtest Generator\r\n                            </Typography>\r\n                            <div style={{ marginLeft: 'auto' }}>\r\n                                <IconButton\r\n                                    edge=\"end\"\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"menu-appbar\"\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={this.handleMenu}\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <HelpIcon />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    id=\"menu-appbar\"\r\n                                    anchorEl={this.state.anchorEl}\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right',\r\n                                    }}\r\n                                    keepMounted\r\n                                    transformOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right',\r\n                                    }}\r\n                                    open={this.state.openedHelp}\r\n                                    onClose={this.handleClose}\r\n                                >\r\n                                    <Typography variant=\"h6\" align=\"center\">\r\n                                        Input List\r\n                                    </Typography>\r\n                                    <div>\r\n                                        <List>\r\n                                            <ListItem>\r\n                                                <strong>Arrow Up</strong>: Volume Up (Max 100)\r\n                                            </ListItem>\r\n                                            <ListItem>\r\n                                                <strong>Arrow Down</strong>: Volume Down (Min 0)\r\n                                            </ListItem>\r\n                                            <ListItem>\r\n                                                <strong>Arrow Left</strong>: Restart Current Element\r\n                                            </ListItem>\r\n                                            <ListItem>\r\n                                                <strong>Arrow Right</strong>: Skip Element\r\n                                            </ListItem>\r\n                                            <ListItem>\r\n                                                <strong>Space</strong>: Toggle Pause/Play\r\n                                            </ListItem>\r\n                                            <ListItem>\r\n                                                <strong>Escape</strong>: Go Back to Menu\r\n                                            </ListItem>\r\n                                            <ListItem>\r\n                                                <strong>F11</strong>: Toggle Fullscreen\r\n                                            </ListItem>\r\n                                        </List>\r\n                                    </div>\r\n                                </Menu>\r\n                            </div>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Box>\r\n                        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                            Configure\r\n                        </Typography>\r\n                        <Stepper style={{backgroundColor : '#282D35'}} alternativeLabel activeStep={this.state.activeStep} connector={<QontoConnector />}>\r\n                            {steps.map((label) => (\r\n                                <Step key={label}>\r\n                                    <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\r\n                                </Step>\r\n                            ))}\r\n                        </Stepper>\r\n                    </Box>\r\n                    <Box>\r\n                        <React.Fragment>\r\n                            {this.getStepContent()}\r\n                        </React.Fragment>\r\n                    </Box>\r\n                    <div style={{\r\n                        position: 'fixed',\r\n                        bottom: '77px',\r\n                        right: '20px'\r\n                    }}>\r\n                        {this.state.activeStep !== 0 && (\r\n                            <Button onClick={this.handleBack} style={{color : '#0FDC06'}}>\r\n                                Back\r\n                            </Button>\r\n                        )}\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{backgroundColor : '#0FDC06'}}\r\n                            onClick={this.state.activeStep === steps.length - 1 ? this.startBlindtest : this.handleNext}\r\n                        >\r\n                            {this.state.activeStep === steps.length - 1 ? 'Start' : 'Next'}\r\n                        </Button>\r\n                    </div>\r\n                    <Copyright />\r\n                </React.Fragment>\r\n            </div>\r\n        );\r\n    }\r\n}","import games from '../Assets/game.json'\r\nimport film from '../Assets/film.json'\r\nimport anime from '../Assets/anime.json'\r\n//const fs = require('fs');\r\nconst { Random, MersenneTwister19937 } = require('random-js');\r\n//const path = require('path');\r\n\r\nconst random = new Random(MersenneTwister19937.autoSeed());\r\n\r\nconst ThemeList = {\r\n    games: games,\r\n    animes: anime,\r\n    film: film\r\n}\r\n\r\n/*function getDirectories(source) {\r\n    const dirs = fs.readdir(source, { withFileTypes: true }, err => {console.log('error: ' + err)})\r\n\r\n    if (dirs === undefined) {\r\n        console.log(\"failed to read directory: \" + source);\r\n        return undefined;\r\n    }\r\n    return (dirs.filter(dirent => dirent.isDirectory())\r\n        .map(dirent => dirent.name));\r\n}*/\r\n\r\n/*const getAbsolutePath = source => path.resolve(source);\r\n\r\nconst getDirectories = source =>\r\n    fs.readdirSync(source, { withFileTypes: true })\r\n        .filter(dirent => dirent.isDirectory())\r\n        .map(dirent => dirent.name);\r\n\r\nconst getFiles = source =>\r\n    fs.readdirSync(source, { withFileTypes: true })\r\n        .filter(dirent => dirent.isFile())\r\n        .map(dirent => dirent.name);*/\r\n\r\n/*function GenerateSelection(assetsPath, size) {\r\n    const absPath = getAbsolutePath(assetsPath);\r\n    console.log(absPath)\r\n    //getting shuffled list of assets in specified dir\r\n    const assets = random.shuffle(getDirectories(absPath));\r\n    let selectionArray = [];\r\n    let parsedSelectionArray = [];\r\n\r\n    //console.log(assets);\r\n\r\n    //isolate wanted number of selection\r\n    for (let i = 0; i < size; i++) {\r\n        if (i >= assets.length) {\r\n            break;\r\n        }\r\n        selectionArray.push(assets[i]);\r\n    }\r\n\r\n    //get random info to display for each selection\r\n    selectionArray.forEach(asset => {\r\n        const music = (absPath + '/' + asset + '/musics/' + random.shuffle(getFiles(absPath + '/' + asset + '/musics'))[0]).replace(/\\\\/g, '/');\r\n        const background = (absPath + '/' + asset + '/backgrounds/' + random.shuffle(getFiles(absPath + '/' + asset + '/backgrounds'))[0]).replace(/\\\\/g, '/');\r\n        parsedSelectionArray.push({\r\n            music: music,\r\n            image: background,\r\n        });\r\n    });\r\n\r\n    return (parsedSelectionArray);\r\n}*/\r\n\r\n/*export const checkAssetsDirectory = (path) => {\r\n    console.log(path);\r\n    const assets = getDirectories(path);\r\n\r\n    for (let i = 0; i < assets.length; i++) {\r\n        const dirs = getDirectories(path + '/' + assets[i]);\r\n        if (dirs.length === 2) {\r\n            if (dirs[0] !== 'backgrounds' || dirs[1] !== 'musics') {\r\n                return assets[i];\r\n            } else {\r\n                const filesBG = getFiles(path + '/' + assets[i] + '/backgrounds');\r\n                const filesMusics = getFiles(path + '/' + assets[i] + '/musics');\r\n\r\n                if (filesBG.length <= 0 || filesMusics <= 0) {\r\n                    return assets[i];\r\n                }\r\n            }\r\n        } else {\r\n            return assets[i];\r\n        }\r\n    }\r\n    return undefined;\r\n}*/\r\n\r\nconst FlatMapAssets = (assets) => {\r\n    //isolate wanted number of selection\r\n    const flatMappedAssets = assets.map(asset => {\r\n        const flatMappedAsset = asset.url.map(url => {\r\n            return ({\r\n                name: asset.name,\r\n                url:  url.link.split('=')[1],\r\n                start: url.start\r\n            })\r\n        })\r\n        return (flatMappedAsset)\r\n    })\r\n\r\n    return (random.shuffle(flatMappedAssets.flat(1)))\r\n}\r\n\r\nexport const GenerateSelectionFromJSON = (theme, size, reuseGame) => {\r\n    const assets = random.shuffle(ThemeList[theme]);\r\n\r\n    if (reuseGame === true) {\r\n        const flatMappedAssets = FlatMapAssets(assets)\r\n\r\n        //isolate wanted number of selection\r\n        return (flatMappedAssets.slice(0, size));\r\n    }\r\n\r\n    //isolate wanted number of selection\r\n    const selectionArray = assets.slice(0, size);\r\n\r\n    //get random info to display for each selection\r\n    const parsedSelectionArray = selectionArray.map(asset => {\r\n        const winnerChoice = random.shuffle(asset.url)[0];\r\n        return ({\r\n            name: asset.name,\r\n            url: winnerChoice.link.split('=')[1],\r\n            start: winnerChoice.start\r\n        })\r\n    })\r\n\r\n    return(parsedSelectionArray);\r\n}\r\n","\r\nfunction HandleVolumeUp(player) {\r\n    const volume = player.getVolume()\r\n\r\n    player.setVolume(volume + 10)\r\n}\r\n\r\nfunction HandleVolumeDown(player) {\r\n    const volume = player.getVolume()\r\n\r\n    player.setVolume(volume - 10)\r\n}\r\n\r\nfunction HandlePause(player) {\r\n    const status = player.getPlayerState()\r\n\r\n    if (status === 1) {\r\n        player.pauseVideo()\r\n    } else if (status === 2) {\r\n        player.playVideo()\r\n    }\r\n}\r\n\r\nconst KeyboardEvents = {\r\n    HandleVolumeDown: HandleVolumeDown,\r\n    HandleVolumeUp: HandleVolumeUp,\r\n    HandlePause: HandlePause\r\n}\r\n\r\nexport default KeyboardEvents;\r\n","import YouTube from \"react-youtube\";\r\nimport React from \"react\";\r\n\r\nexport default class PlaylistManager {\r\n    constructor(playlist, guessTime, waitTime) {\r\n        this.playlist = playlist;\r\n        this.guessTime = guessTime;\r\n        this.answerTime = waitTime\r\n        this.player = null;\r\n        this.playlistIndex = 0;\r\n        this.loaded = false;\r\n        this.error = false;\r\n    }\r\n\r\n    updatePlayer = (shift) => {\r\n        let timeoutCounter = 20;\r\n        this.loaded = false;\r\n        this.error = false;\r\n        return new Promise((resolve, reject) => {\r\n            if (this.playlist.length === 0) {\r\n                reject();\r\n                return;\r\n            }\r\n            const music = shift === true ? this.playlist.shift() : this.playlist[0];\r\n\r\n            //console.log(\"Loading music: \" + music.name);\r\n            const opt = {\r\n                height: window.screen.height - 5,\r\n                width: window.screen.width,\r\n                playerVars: {\r\n                    // https://developers.google.com/youtube/player_parameters\r\n                    autoplay: 0,\r\n                    start: music.start,\r\n                    end: music.start + this.guessTime + this.answerTime + 2,\r\n                    fs: 0,\r\n                    origin: window.location,\r\n                }\r\n            }\r\n            console.log(music.url)\r\n            this.player = <YouTube videoId={music.url} opts={opt} onReady={this._onReady} onPlay={this._onPlay} onError={this._onError} onStateChange={this._onStateChange} />\r\n\r\n            const timer = setInterval(() => {\r\n                timeoutCounter--;\r\n                if (this.loaded === true) {\r\n                    clearInterval(timer);\r\n                    resolve();\r\n                } else if (timeoutCounter <= 0 || this.error === true) {\r\n                    console.log(\"Failed to load music\");\r\n                    clearInterval(timer);\r\n                    reject();\r\n                }\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    _onReady = (event) => {\r\n        // access to player in all event handlers via event.target\r\n        event.target.playVideo();\r\n        console.log(\"ready to play video\")\r\n    }\r\n\r\n    _onPlay = (event) => {\r\n        // access to player in all event handlers via event.target\r\n        //event.target.pauseVideo();\r\n        console.log(\"video started\")\r\n        this.loaded = true;\r\n        this.playlistIndex++;\r\n    }\r\n\r\n    _onEnd(event) {\r\n        // access to player in all event handlers via event.target\r\n        //event.target.pauseVideo();\r\n        event.target.stopVideo();\r\n        //this.nextGuess(true)\r\n    }\r\n\r\n    _onError = (event) => {\r\n        // access to player in all event handlers via event.target\r\n        alert(\"Failed to load video\")\r\n        this.error = true;\r\n        //this.nextGuess(true)\r\n    }\r\n\r\n    _onStateChange = (event) => {\r\n        //Can do something with all states here\r\n        console.log(\"state changed: \" + event.data)\r\n        const code = event.data;\r\n        switch (code) {\r\n            case -1:\r\n                break\r\n            case 1:\r\n                break\r\n            case 2:\r\n                break\r\n            default:\r\n                break\r\n        }\r\n        /*\r\n        -1 (unstarted)\r\n        0 (ended)\r\n        1 (playing)\r\n        2 (paused)\r\n        3 (buffering)\r\n        5 (video cued).\r\n         */\r\n    }\r\n}","import React from \"react\";\r\nimport {GenerateSelectionFromJSON} from '../Generator/SelectionGenerator'\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport KeyboardEvents from './KeyboardEvent';\r\nimport PlaylistManager from \"./PlaylistManager\";\r\n\r\nconst Status = {\r\n    None: -1,\r\n    Play: 1,\r\n    Pause: 2,\r\n    Restart: 3,\r\n    Pass: 4\r\n}\r\n\r\nexport default class BlindtestGenerator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //Playlist Configuration\r\n        const playlistSize = window.localStorage.getItem('playlist_size')\r\n        const allowSameLicence = (window.localStorage.getItem('allow_same_licence') === 'true')\r\n        const theme = window.localStorage.getItem('theme')\r\n\r\n        //Session Configuration\r\n        this.guessTime = parseInt(window.localStorage.getItem('guess_time'))\r\n        this.waitTime = parseInt(window.localStorage.getItem('wait_time'))\r\n\r\n        this.playlist = GenerateSelectionFromJSON(theme, playlistSize, allowSameLicence)\r\n        this.playlistManager = new PlaylistManager(this.playlist);\r\n\r\n        this.state = {\r\n            display: false,\r\n            status: Status.None,\r\n            counter: this.guessTime\r\n        }\r\n\r\n        this.nextGuess = this.nextGuess.bind(this)\r\n        this.startGuessTime = this.startGuessTime.bind(this)\r\n        this.startAnswerTime = this.startAnswerTime.bind(this)\r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n        //this._onStateChange = this._onStateChange.bind(this)\r\n\r\n        if (this.playlist.length === 0) {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    nextGuess(shift) {\r\n        console.log(\"Starting new guess\");\r\n        this.playlistManager.updatePlayer(shift).then(() => {\r\n            this.setState({\r\n                status: Status.Play,\r\n                counter: this.guessTime\r\n            })\r\n            this.startGuessTime();\r\n        }).catch(() => {\r\n            console.log(\"erreur du chargement de la music\");\r\n            if (this.state.playlistManager.playlist.length === 0) {\r\n                this.props.history.push('/')\r\n            } else {\r\n                this.nextGuess(shift);\r\n            }\r\n        })\r\n    }\r\n\r\n    doneAction = (timer, nextGuess) => {\r\n        clearInterval(timer)\r\n        this.setState({\r\n            status: Status.None,\r\n            display: false,\r\n            counter: this.guessTime\r\n        })\r\n        this.nextGuess(nextGuess)\r\n    }\r\n\r\n    checkStatus = (timer) => {\r\n        switch (this.state.status) {\r\n            case Status.Pause:\r\n                return true\r\n            case Status.Restart:\r\n                this.doneAction(timer,false)\r\n                return true\r\n            case Status.Pass:\r\n                this.doneAction(timer,true)\r\n                return\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    startAnswerTime() {\r\n        const timer = setInterval(() => {\r\n            //check status\r\n            if (this.checkStatus(timer)) {\r\n                return;\r\n            }\r\n            const counter = this.state.counter\r\n            if (counter === 0) {\r\n                this.doneAction(timer,true)\r\n            } else {\r\n                this.setState({\r\n                    counter: counter - 1\r\n                })\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    startGuessTime() {\r\n        const timer = setInterval(() => {\r\n            //check status\r\n            if (this.checkStatus(timer)) {\r\n                return;\r\n            }\r\n            const counter = this.state.counter\r\n            if (counter === 1) {\r\n                clearInterval(timer)\r\n                this.setState({\r\n                    display: true,\r\n                    counter: this.waitTime\r\n                })\r\n                this.startAnswerTime()\r\n            } else {\r\n                this.setState({\r\n                    counter: counter - 1\r\n                })\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    handleKeyDown(key, event) {\r\n        if (this.state.player === null) {\r\n            return\r\n        }\r\n        console.log(\"receiving key: \" + key)\r\n        switch (key) {\r\n            case 'up':\r\n                KeyboardEvents.HandleVolumeUp(this.playlistManager.player)\r\n                break\r\n            case 'down':\r\n                KeyboardEvents.HandleVolumeDown(this.playlistManager.player)\r\n                break\r\n            case 'left':\r\n                this.setState({\r\n                    status: Status.Restart\r\n                })\r\n                break\r\n            case 'right':\r\n                this.setState({\r\n                    status: Status.Pass\r\n                })\r\n                break\r\n            case 'space':\r\n                this.setState({\r\n                    status: this.state.status === Status.Pause ? Status.Play : Status.Pause\r\n                })\r\n                KeyboardEvents.HandlePause(this.playlistManager.player)\r\n                break\r\n            case 'esc':\r\n                //TODO arreter le chargement des autres musiques\r\n                this.props.history.push('/')\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.nextGuess(true);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Helmet bodyAttributes={{style: 'background-color : #242629'}}/>\r\n            {!this.state.display &&\r\n            <div style={{\r\n                position: 'absolute', left: '50%', top: '50%',\r\n                transform: 'translate(-50%, -50%)',\r\n                fontSize: '200px',\r\n                color: '#BFC6D0',\r\n                fontWeight: 'bold'\r\n            }}>\r\n                {this.state.counter}\r\n            </div>\r\n            }\r\n            <div style={{ display: this.state.display ? '' : 'none' }}>\r\n                {this.playlistManager.player}\r\n            </div>\r\n            <div style={{ display: 'none' }}>\r\n                <KeyboardEventHandler\r\n                    handleKeys={['up', 'down', 'left', 'right', 'space', 'esc']}\r\n                    onKeyEvent={this.handleKeyDown} />\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Route, HashRouter} from 'react-router-dom';\r\nimport Checkout from './Configuration/Checkout';\r\nimport BlindtestGenerator from \"./Session/BlindtestGenerator\";\r\n\r\nclass RoutingConfig extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter basename='/'>\r\n                <div>\r\n                    <Route exact path=\"/\" component={Checkout}/>\r\n                    <Route exact path=\"/blindtest\" component={BlindtestGenerator}/>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RoutingConfig;","import './App.css';\r\nimport React from \"react\";\r\nimport RoutingConfig from \"./RoutingConfig\";\r\n\r\nfunction App() {\r\n  //Setting up default Values\r\n  window.localStorage.setItem('theme', 'games')\r\n  window.localStorage.setItem('playlist_size', '100')\r\n  window.localStorage.setItem('guess_time', '13')\r\n  window.localStorage.setItem('wait_time', '5')\r\n  window.localStorage.setItem('allow_same_licence', 'false')\r\n\r\n  return (<RoutingConfig />);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}