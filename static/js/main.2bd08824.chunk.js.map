{"version":3,"sources":["Configuration/ThemeSelectorForm.js","Configuration/Review.js","Configuration/BlindtestCustomizerForm.js","Configuration/Checkout.js","Generator/SelectionGenerator.js","Session/KeyboardEvent.js","Session/BlindtestGenerator.js","RoutingConfig.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeSelectorForm","props","theme","window","localStorage","getItem","defaultTheme","state","opened","classes","makeStyles","button","display","marginTop","spacing","formControl","margin","minWidth","setOpen","bind","handleOpen","handleClose","handleChange","event","setItem","target","value","this","setState","Fragment","Typography","variant","gutterBottom","align","Box","FormControl","className","fullWidth","InputLabel","id","Select","labelId","open","onClose","onOpen","onChange","defaultValue","MenuItem","React","Component","ThemeList","games","animes","film","getTheme","key","allowSameLicence","getFormattedPlaylistSize","playlistSize","getFormattedGuessTime","guessTime","waitTime","Review","Grid","container","item","xs","BlindtestCustomizerForm","parseInt","defaultplaylistSize","defaultGuessTime","defaultWaitTime","updatePlaylistSize","updateGuessTime","updateWaitTime","handleSwitchChange","newPlaylistSize","toString","actualGuessTime","newGuessTime","innerText","valuetext","actualWaitTime","newWaitTime","checked","component","FormGroup","FormLabel","TextField","type","inputProps","min","style","textAlign","color","name","marginBottom","Slider","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","max","Switch","Copyright","backgroundColor","Link","href","Date","getFullYear","QontoConnector","withStyles","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","StepConnector","useQontoStepIconStyles","root","height","alignItems","circle","width","zIndex","fontSize","QontoStepIcon","clsx","steps","Checkout","activeStep","setActiveStep","handleBack","handleNext","startBlindtest","Error","history","push","overflow","CssBaseline","AppBar","position","Toolbar","noWrap","Stepper","connector","map","label","Step","StepLabel","StepIconComponent","getStepContent","Button","onClick","length","require","random","Random","MersenneTwister19937","autoSeed","anime","GenerateSelectionFromJSON","size","reuseGame","assets","shuffle","flatMappedAssets","asset","url","link","split","start","flat","FlatMapAssets","slice","winnerChoice","KeyboardEvents","HandleVolumeDown","player","volume","getVolume","setVolume","HandleVolumeUp","HandlePause","status","getPlayerState","pauseVideo","playVideo","BlindtestGenerator","_onReady","console","log","_onPlay","loaded","startGuessTime","_onError","alert","nextGuess","playlist","paused","counter","waiter","embed","createPlayer","startAnswerTime","handleKeyDown","opts","playerVars","autoplay","end","fs","origin","location","videoId","onReady","onPlay","onError","onStateChange","_onStateChange","shift","timer","setInterval","clearInterval","stopVideo","data","handleKeys","onKeyEvent","RoutingConfig","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bd08824.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport default class ThemeSelectorForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const theme = window.localStorage.getItem('theme')\r\n\r\n        this.defaultTheme = theme ? theme : 'games'\r\n\r\n        this.state = {\r\n            opened: false,\r\n            theme: this.defaultTheme,\r\n            classes:  makeStyles((theme) => ({\r\n                button: {\r\n                    display: 'block',\r\n                    marginTop: theme.spacing(2),\r\n                },\r\n                formControl: {\r\n                    margin: theme.spacing(1),\r\n                    minWidth: 120,\r\n                },\r\n            }))\r\n        }\r\n\r\n        this.setOpen = this.setOpen.bind(this);\r\n        this.handleOpen = this.handleOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        window.localStorage.setItem('theme', event.target.value);\r\n        this.setState({\r\n            theme: event.target.value\r\n        })\r\n    };\r\n\r\n    setOpen(state) {\r\n        this.setState({\r\n            opened: state\r\n        })\r\n    }\r\n\r\n    handleClose() {\r\n        this.setOpen(false);\r\n    }\r\n\r\n    handleOpen() {\r\n        this.setOpen(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Typography variant=\"h6\" gutterBottom align='center'>\r\n                    Select Theme\r\n                </Typography>\r\n                <Box align='center'>\r\n                    <FormControl className={this.state.classes.formControl} fullWidth>\r\n                        <InputLabel id=\"demo-controlled-open-select-label\">Theme</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-controlled-open-select-label\"\r\n                            id=\"demo-controlled-open-select\"\r\n                            open={this.state.open}\r\n                            onClose={this.handleClose}\r\n                            onOpen={this.handleOpen}\r\n                            value={this.state.theme}\r\n                            onChange={this.handleChange}\r\n                            defaultValue={this.defaultTheme}\r\n                        >\r\n                            <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                            </MenuItem>\r\n                            <MenuItem value='games'>Video Games</MenuItem>\r\n                            <MenuItem value='animes'>Anime</MenuItem>\r\n                            <MenuItem value='film'>Films</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Box>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n    Typography,\r\n    Grid\r\n} from \"@material-ui/core\"\r\n\r\nconst ThemeList = {\r\n    games: \"Video Games\",\r\n    animes: \"Animes\",\r\n    film: \"Movies\"\r\n}\r\n\r\nfunction getTheme() {\r\n    const key = window.localStorage.getItem('theme')\r\n    const allowSameLicence = (window.localStorage.getItem('allow_same_licence') === 'true')\r\n\r\n    const result = `${ThemeList[key]} (${allowSameLicence ? 'Multiple selection per Licence' : 'One selection per Licence'})`\r\n    return result;\r\n}\r\n\r\nfunction getFormattedPlaylistSize() {\r\n    const playlistSize = window.localStorage.getItem('playlist_size');\r\n\r\n    return `${playlistSize} elements in this playlist`;\r\n}\r\n\r\nfunction getFormattedGuessTime() {\r\n    const guessTime = window.localStorage.getItem('guess_time');\r\n    const waitTime = window.localStorage.getItem('wait_time');\r\n\r\n    return `${guessTime} sec to guess then ${waitTime} before next guess`;\r\n}\r\n\r\nexport default function Review() {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" gutterBottom align='center'>\r\n                Configuration summary\r\n            </Typography>\r\n            <Typography variant=\"h6\" gutterBottom align='center'>\r\n                <Grid container>\r\n                    <React.Fragment key=\"Theme\">\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom>Theme</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom>{getTheme()}</Typography>\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                    <React.Fragment key=\"Size of Playlist\">\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom>Size of Playlist</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom>{getFormattedPlaylistSize()}</Typography>\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                    <React.Fragment key=\"Guess Time\">\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom>Guess/Answer Time</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography gutterBottom>{getFormattedGuessTime()}</Typography>\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                </Grid>\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Typography,\r\n    TextField,\r\n    FormControl,\r\n    Slider,\r\n    Box,\r\n    FormLabel,\r\n    Switch,\r\n    FormGroup\r\n} from \"@material-ui/core\"\r\n\r\nexport default class BlindtestCustomizerForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const playlistSize = parseInt(window.localStorage.getItem('playlist_size'))\r\n        const guessTime = parseInt(window.localStorage.getItem('guess_time'))\r\n        const waitTime = parseInt(window.localStorage.getItem('wait_time'))\r\n        const allowSameLicence = (window.localStorage.getItem('allow_same_licence') === 'true')\r\n\r\n        this.defaultplaylistSize = playlistSize ? playlistSize : 100\r\n        this.defaultGuessTime = guessTime ? guessTime : 13\r\n        this.defaultWaitTime = waitTime ? waitTime : 5\r\n\r\n        this.state = {\r\n            opened: false,\r\n            playlistSize: this.defaultplaylistSize,\r\n            guessTime: this.defaultGuessTime,\r\n            waitTime: this.defaultWaitTime,\r\n            allowSameLicence: allowSameLicence,\r\n            classes:  makeStyles((theme) => ({\r\n                formControl: {\r\n                    margin: theme.spacing(1),\r\n                    minWidth: 120,\r\n                }\r\n            }))\r\n        }\r\n\r\n        this.updatePlaylistSize = this.updatePlaylistSize.bind(this);\r\n        this.updateGuessTime = this.updateGuessTime.bind(this);\r\n        this.updateWaitTime = this.updateWaitTime.bind(this);\r\n        this.handleSwitchChange = this.handleSwitchChange.bind(this);\r\n    }\r\n\r\n    valuetext(value) {\r\n        return `${value}`;\r\n    }\r\n\r\n    updatePlaylistSize(event) {\r\n        const newPlaylistSize = parseInt(event.target.value)\r\n\r\n        if (!newPlaylistSize) {\r\n            window.localStorage.setItem('playlist_size', '0');\r\n        }\r\n        this.setState({\r\n            playlistSize: newPlaylistSize\r\n        })\r\n        window.localStorage.setItem('playlist_size', !newPlaylistSize ? '0' : newPlaylistSize.toString())\r\n    }\r\n\r\n    updateGuessTime(event) {\r\n        const actualGuessTime = this.state.guessTime\r\n        const newGuessTime = parseInt(event.target.innerText)\r\n\r\n        if (actualGuessTime !== newGuessTime) {\r\n            this.setState({\r\n                guessTime: newGuessTime\r\n            })\r\n            window.localStorage.setItem('guess_time', this.valuetext(newGuessTime));\r\n        }\r\n    }\r\n\r\n    updateWaitTime(event) {\r\n        const actualWaitTime = this.state.waitTime\r\n        const newWaitTime = parseInt(event.target.innerText)\r\n\r\n\r\n        if (actualWaitTime !== newWaitTime) {\r\n            this.setState({\r\n                waitTime: newWaitTime\r\n            })\r\n            window.localStorage.setItem('wait_time', this.valuetext(newWaitTime));\r\n        }\r\n    }\r\n\r\n    handleSwitchChange(event) {\r\n        window.localStorage.setItem('allow_same_licence', event.target.checked.toString())\r\n        this.setState({\r\n            allowSameLicence: event.target.checked\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Typography variant=\"h6\" gutterBottom align='center'>\r\n                    Customize Blindtest\r\n                </Typography>\r\n                <Box align='center'>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\" gutterBottom>\r\n                                Size of Playlist\r\n                            </FormLabel>\r\n                            <TextField\r\n                                type=\"number\"\r\n                                inputProps={{min: 0, style: { textAlign: 'center' }}}\r\n                                color=\"secondary\"\r\n                                value={this.state.playlistSize}\r\n                                onChange={this.updatePlaylistSize}\r\n                                name=\"numberformat\"\r\n                                id=\"formatted-numberformat-input\"\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\" gutterBottom style={{ marginBottom: '40px' }}>\r\n                                Guess Time\r\n                            </FormLabel>\r\n                            <Slider\r\n                                defaultValue={this.defaultGuessTime}\r\n                                onChange={this.updateGuessTime}\r\n                                getAriaValueText={this.valuetext}\r\n                                aria-labelledby=\"discrete-slider\"\r\n                                valueLabelDisplay=\"on\"\r\n                                step={1}\r\n                                marks\r\n                                min={5}\r\n                                max={20}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\" gutterBottom style={{ marginBottom: '40px' }}>\r\n                                Time before next Guess\r\n                            </FormLabel>\r\n                            <Slider\r\n                                defaultValue={this.defaultWaitTime}\r\n                                onChange={this.updateWaitTime}\r\n                                getAriaValueText={this.valuetext}\r\n                                aria-labelledby=\"discrete-slider\"\r\n                                valueLabelDisplay=\"on\"\r\n                                step={1}\r\n                                marks\r\n                                min={1}\r\n                                max={10}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormLabel component=\"legend\">Allow multiple selection per Licence</FormLabel>\r\n                            <Box align='center'>\r\n                                <Switch checked={this.state.allowSameLicence} onChange={this.handleSwitchChange} name=\"allow-same_licence\" />\r\n                            </Box>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </Box>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport ThemeSelectorForm from './ThemeSelectorForm';\r\nimport Review from './Review';\r\nimport clsx from \"clsx\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport PropTypes from \"prop-types\";\r\nimport BlindtestCustomizerForm from \"./BlindtestCustomizerForm\";\r\nimport {\r\n    CssBaseline,\r\n    AppBar,\r\n    Toolbar,\r\n    Stepper,\r\n    Step,\r\n    StepLabel,\r\n    Button,\r\n    Link,\r\n    Typography,\r\n    Box,\r\n    StepConnector\r\n} from \"@material-ui/core\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" style={{\r\n            backgroundColor: '#282D35',\r\n            color: 'white'\r\n        }}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Emolitt\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\n//Progress Bar\r\nconst QontoConnector = withStyles({\r\n    alternativeLabel: {\r\n        top: 10,\r\n        left: 'calc(-50% + 16px)',\r\n        right: 'calc(50% + 16px)',\r\n    },\r\n    active: {\r\n        '& $line': {\r\n            borderColor: '#784af4',\r\n        },\r\n    },\r\n    completed: {\r\n        '& $line': {\r\n            borderColor: '#784af4',\r\n        },\r\n    },\r\n    line: {\r\n        borderColor: '#eaeaf0',\r\n        borderTopWidth: 3,\r\n        borderRadius: 1,\r\n    },\r\n})(StepConnector);\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n    root: {\r\n        color: '#eaeaf0',\r\n        display: 'flex',\r\n        height: 22,\r\n        alignItems: 'center',\r\n    },\r\n    active: {\r\n        color: '#e8176b',\r\n    },\r\n    circle: {\r\n        width: 8,\r\n        height: 8,\r\n        borderRadius: '50%',\r\n        backgroundColor: 'currentColor',\r\n    },\r\n    completed: {\r\n        color: '#e8176b',\r\n        zIndex: 1,\r\n        fontSize: 18,\r\n    },\r\n});\r\n\r\n\r\nfunction QontoStepIcon(props) {\r\n    const classes = useQontoStepIconStyles();\r\n    const { active, completed } = props;\r\n\r\n    return (\r\n        <div\r\n            className={clsx(classes.root, {\r\n                [classes.active]: active,\r\n            })}\r\n        >\r\n            {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n    /**\r\n     * Whether this step is active.\r\n     */\r\n    active: PropTypes.bool,\r\n    /**\r\n     * Mark the step as completed. Is passed to child components.\r\n     */\r\n    completed: PropTypes.bool,\r\n};\r\n\r\nconst steps = ['Select theme', 'Select Parameters', 'Validate'];\r\n\r\n\r\nexport default class Checkout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeStep: 0\r\n        }\r\n\r\n        this.setActiveStep = this.setActiveStep.bind(this);\r\n        this.handleBack = this.handleBack.bind(this);\r\n        this.handleNext = this.handleNext.bind(this);\r\n        this.startBlindtest = this.startBlindtest.bind(this);\r\n\r\n    }\r\n\r\n    getStepContent() {\r\n        const step = this.state.activeStep\r\n        switch (step) {\r\n            case 0:\r\n                return <ThemeSelectorForm />;\r\n            case 1:\r\n                return <BlindtestCustomizerForm />;\r\n            case 2:\r\n                return <Review />;\r\n            default:\r\n                throw new Error('Unknown step');\r\n        }\r\n    }\r\n\r\n    startBlindtest() {\r\n        this.props.history.push('/blindtest');\r\n    }\r\n\r\n    setActiveStep(step) {\r\n        this.setState({\r\n            activeStep: step\r\n        })\r\n    }\r\n\r\n    handleNext() {\r\n        this.setActiveStep(this.state.activeStep + 1);\r\n    };\r\n\r\n    handleBack() {\r\n        this.setActiveStep(this.state.activeStep - 1);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ overflow: 'hidden' }}>\r\n                <React.Fragment>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"absolute\" color=\"default\">\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                                Blindtest Generator\r\n                            </Typography>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Box>\r\n                        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                            Configure\r\n                        </Typography>\r\n                        <Stepper alternativeLabel activeStep={this.state.activeStep} connector={<QontoConnector />}>\r\n                            {steps.map((label) => (\r\n                                <Step key={label}>\r\n                                    <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\r\n                                </Step>\r\n                            ))}\r\n                        </Stepper>\r\n                    </Box>\r\n                    <Box>\r\n                        <React.Fragment>\r\n                            {this.getStepContent()}\r\n                        </React.Fragment>\r\n                    </Box>\r\n                    <Box>\r\n                        {this.state.activeStep !== 0 && (\r\n                            <Button onClick={this.handleBack}>\r\n                                Back\r\n                            </Button>\r\n                        )}\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.state.activeStep === steps.length - 1 ? this.startBlindtest : this.handleNext}\r\n                        >\r\n                            {this.state.activeStep === steps.length - 1 ? 'Start' : 'Next'}\r\n                        </Button>\r\n                    </Box>\r\n                    <Copyright />\r\n                </React.Fragment>\r\n            </div>\r\n        );\r\n    }\r\n}","import games from '../Assets/game.json'\r\nimport film from '../Assets/film.json'\r\nimport anime from '../Assets/anime.json'\r\n//const fs = require('fs');\r\nconst { Random, MersenneTwister19937 } = require('random-js');\r\n//const path = require('path');\r\n\r\nconst random = new Random(MersenneTwister19937.autoSeed());\r\n\r\nconst ThemeList = {\r\n    games: games,\r\n    animes: anime,\r\n    film: film\r\n}\r\n\r\n/*function getDirectories(source) {\r\n    const dirs = fs.readdir(source, { withFileTypes: true }, err => {console.log('error: ' + err)})\r\n\r\n    if (dirs === undefined) {\r\n        console.log(\"failed to read directory: \" + source);\r\n        return undefined;\r\n    }\r\n    return (dirs.filter(dirent => dirent.isDirectory())\r\n        .map(dirent => dirent.name));\r\n}*/\r\n\r\n/*const getAbsolutePath = source => path.resolve(source);\r\n\r\nconst getDirectories = source =>\r\n    fs.readdirSync(source, { withFileTypes: true })\r\n        .filter(dirent => dirent.isDirectory())\r\n        .map(dirent => dirent.name);\r\n\r\nconst getFiles = source =>\r\n    fs.readdirSync(source, { withFileTypes: true })\r\n        .filter(dirent => dirent.isFile())\r\n        .map(dirent => dirent.name);*/\r\n\r\n/*function GenerateSelection(assetsPath, size) {\r\n    const absPath = getAbsolutePath(assetsPath);\r\n    console.log(absPath)\r\n    //getting shuffled list of assets in specified dir\r\n    const assets = random.shuffle(getDirectories(absPath));\r\n    let selectionArray = [];\r\n    let parsedSelectionArray = [];\r\n\r\n    //console.log(assets);\r\n\r\n    //isolate wanted number of selection\r\n    for (let i = 0; i < size; i++) {\r\n        if (i >= assets.length) {\r\n            break;\r\n        }\r\n        selectionArray.push(assets[i]);\r\n    }\r\n\r\n    //get random info to display for each selection\r\n    selectionArray.forEach(asset => {\r\n        const music = (absPath + '/' + asset + '/musics/' + random.shuffle(getFiles(absPath + '/' + asset + '/musics'))[0]).replace(/\\\\/g, '/');\r\n        const background = (absPath + '/' + asset + '/backgrounds/' + random.shuffle(getFiles(absPath + '/' + asset + '/backgrounds'))[0]).replace(/\\\\/g, '/');\r\n        parsedSelectionArray.push({\r\n            music: music,\r\n            image: background,\r\n        });\r\n    });\r\n\r\n    return (parsedSelectionArray);\r\n}*/\r\n\r\n/*export const checkAssetsDirectory = (path) => {\r\n    console.log(path);\r\n    const assets = getDirectories(path);\r\n\r\n    for (let i = 0; i < assets.length; i++) {\r\n        const dirs = getDirectories(path + '/' + assets[i]);\r\n        if (dirs.length === 2) {\r\n            if (dirs[0] !== 'backgrounds' || dirs[1] !== 'musics') {\r\n                return assets[i];\r\n            } else {\r\n                const filesBG = getFiles(path + '/' + assets[i] + '/backgrounds');\r\n                const filesMusics = getFiles(path + '/' + assets[i] + '/musics');\r\n\r\n                if (filesBG.length <= 0 || filesMusics <= 0) {\r\n                    return assets[i];\r\n                }\r\n            }\r\n        } else {\r\n            return assets[i];\r\n        }\r\n    }\r\n    return undefined;\r\n}*/\r\n\r\nconst FlatMapAssets = (assets) => {\r\n    //isolate wanted number of selection\r\n    const flatMappedAssets = assets.map(asset => {\r\n        const flatMappedAsset = asset.url.map(url => {\r\n            return ({\r\n                name: asset.name,\r\n                url:  url.link.split('=')[1],\r\n                start: url.start\r\n            })\r\n        })\r\n        return (flatMappedAsset)\r\n    })\r\n\r\n    return (random.shuffle(flatMappedAssets.flat(1)))\r\n}\r\n\r\nexport const GenerateSelectionFromJSON = (theme, size, reuseGame) => {\r\n    const assets = random.shuffle(ThemeList[theme]);\r\n\r\n    if (reuseGame === true) {\r\n        const flatMappedAssets = FlatMapAssets(assets)\r\n\r\n        //isolate wanted number of selection\r\n        return (flatMappedAssets.slice(0, size));\r\n    }\r\n\r\n    //isolate wanted number of selection\r\n    const selectionArray = assets.slice(0, size);\r\n\r\n    //get random info to display for each selection\r\n    const parsedSelectionArray = selectionArray.map(asset => {\r\n        const winnerChoice = random.shuffle(asset.url)[0];\r\n        return ({\r\n            name: asset.name,\r\n            url: winnerChoice.link.split('=')[1],\r\n            start: winnerChoice.start\r\n        })\r\n    })\r\n\r\n    return(parsedSelectionArray);\r\n}\r\n","\r\nfunction HandleVolumeUp(player) {\r\n    const volume = player.getVolume()\r\n\r\n    player.setVolume(volume + 10)\r\n}\r\n\r\nfunction HandleVolumeDown(player) {\r\n    const volume = player.getVolume()\r\n\r\n    player.setVolume(volume - 10)\r\n}\r\n\r\nfunction HandlePause(player) {\r\n    const status = player.getPlayerState()\r\n\r\n    if (status === 1) {\r\n        player.pauseVideo()\r\n    } else if (status === 2) {\r\n        player.playVideo()\r\n    }\r\n}\r\n\r\nconst KeyboardEvents = {\r\n    HandleVolumeDown: HandleVolumeDown,\r\n    HandleVolumeUp: HandleVolumeUp,\r\n    HandlePause: HandlePause\r\n}\r\n\r\nexport default KeyboardEvents;\r\n","import React from \"react\";\r\nimport YouTube from 'react-youtube';\r\nimport {GenerateSelectionFromJSON} from '../Generator/SelectionGenerator'\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nimport KeyboardEvents from './KeyboardEvent';\r\n\r\nexport default class BlindtestGenerator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //Playlist Configuration\r\n        const playlistSize = window.localStorage.getItem('playlist_size')\r\n        const allowSameLicence = (window.localStorage.getItem('allow_same_licence') === 'true')\r\n        const theme = window.localStorage.getItem('theme')\r\n\r\n        //Session Configuration\r\n        this.guessTime = parseInt(window.localStorage.getItem('guess_time'))\r\n        this.waitTime = parseInt(window.localStorage.getItem('wait_time'))\r\n\r\n        this.playlist = GenerateSelectionFromJSON(theme, playlistSize, allowSameLicence)\r\n        console.log(this.playlist)\r\n\r\n        this.state = {\r\n            display: false,\r\n            paused: false,\r\n            counter: this.guessTime,\r\n            waiter: this.waitTime,\r\n            embed: this.createPlayer(),\r\n            player: null,\r\n            loaded: false\r\n        }\r\n\r\n        this.startGuessTime = this.startGuessTime.bind(this)\r\n        this.startAnswerTime = this.startAnswerTime.bind(this)\r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        if (this.playlist.length === 0) {\r\n            this.props.history.push('/')\r\n        } else {\r\n            this.nextGuess(false)\r\n        }\r\n    }\r\n\r\n    createPlayer() {\r\n        const opts = {\r\n            height: '1076',\r\n            width: '1920',\r\n            playerVars: {\r\n                // https://developers.google.com/youtube/player_parameters\r\n                autoplay: 1,\r\n                start: this.playlist[0].start,\r\n                end: this.playlist[0].start + this.guessTime + this.waitTime + 1,\r\n                fs: 0,\r\n                origin: window.location\r\n            }\r\n        }\r\n\r\n        return <YouTube videoId={this.playlist[0].url} opts={opts} onReady={this._onReady} onPlay={this._onPlay} onError={this._onError} onStateChange={this._onStateChange} />\r\n    }\r\n\r\n    nextGuess(shift) {\r\n        if (shift === true) {\r\n            this.playlist.shift()\r\n        }\r\n        if (this.playlist.length === 0) {\r\n            this.props.history.push('/')\r\n        } else {\r\n            this.setState({\r\n                embed: this.createPlayer(),\r\n                loaded: false\r\n            })\r\n        }\r\n    }\r\n\r\n    startAnswerTime() {\r\n        const timer = setInterval(() => {\r\n            if (this.state.paused === true) {\r\n                return\r\n            }\r\n            const counter = this.state.waiter\r\n            if (counter === 0) {\r\n                clearInterval(timer)\r\n                this.setState({\r\n                    display: false,\r\n                    counter: this.guessTime,\r\n                    waiter: 0,\r\n                    embed: null\r\n                })\r\n                this.nextGuess(true)\r\n            } else {\r\n                this.setState({\r\n                    waiter: counter - 1\r\n                })\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    startGuessTime() {\r\n        const timer = setInterval(() => {\r\n            if (this.state.paused === true) {\r\n                return\r\n            }\r\n            const counter = this.state.counter\r\n            if (counter === 1) {\r\n                clearInterval(timer)\r\n                this.setState({\r\n                    display: true,\r\n                    counter: 0,\r\n                    waiter: this.waitTime\r\n                })\r\n                this.startAnswerTime()\r\n            } else {\r\n                this.setState({\r\n                    counter: counter - 1\r\n                })\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    _onReady = (event) => {\r\n        // access to player in all event handlers via event.target\r\n        //event.target.pauseVideo();\r\n        console.log(\"ready to play\")\r\n        this.setState({\r\n            player: event.target\r\n        })\r\n    }\r\n\r\n    _onPlay = (event) => {\r\n        // access to player in all event handlers via event.target\r\n        //event.target.pauseVideo();\r\n        console.log(\"video started\")\r\n        if (this.state.loaded !== true) {\r\n            this.startGuessTime()\r\n        }\r\n        this.setState({\r\n            loaded: true\r\n        });\r\n    }\r\n\r\n    _onEnd(event) {\r\n        // access to player in all event handlers via event.target\r\n        //event.target.pauseVideo();\r\n        event.target.stopVideo();\r\n        //this.nextGuess(true)\r\n    }\r\n\r\n    _onError = (event) => {\r\n        // access to player in all event handlers via event.target\r\n        alert(\"Failed to load video\")\r\n        this.nextGuess(true)\r\n    }\r\n\r\n    _onStateChange(event) {\r\n        //Can do something with all states here\r\n        console.log(\"state changed: \" + event.data)\r\n        const code = event.data;\r\n        if (code === -1) {\r\n            event.target.playVideo()\r\n        }\r\n        /*\r\n        -1 (unstarted)\r\n        0 (ended)\r\n        1 (playing)\r\n        2 (paused)\r\n        3 (buffering)\r\n        5 (video cued).\r\n         */\r\n    }\r\n\r\n    handleKeyDown(key, event) {\r\n        if (this.state.player === null) {\r\n            return\r\n        }\r\n        console.log(\"receiving key: \" + key)\r\n        switch (key) {\r\n            case 'up':\r\n                KeyboardEvents.HandleVolumeUp(this.state.player)\r\n                break\r\n            case 'down':\r\n                KeyboardEvents.HandleVolumeDown(this.state.player)\r\n                break\r\n            case 'space':\r\n                KeyboardEvents.HandlePause(this.state.player)\r\n                this.setState({\r\n                    paused: !this.state.paused\r\n                })\r\n                break\r\n            case 'esc':\r\n                this.props.history.push('/')\r\n                break\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.state.counter !== 0 && <span>{this.state.counter}</span>}\r\n            <div style={{ display: this.state.display ? '' : 'none' }}>\r\n                {this.state.embed}\r\n            </div>\r\n            <KeyboardEventHandler\r\n                handleKeys={['up', 'down', 'space', 'esc']}\r\n                onKeyEvent={this.handleKeyDown} />\r\n        </div>\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n} from 'react-router-dom';\r\n\r\nimport Checkout from './Configuration/Checkout';\r\nimport BlindtestGenerator from \"./Session/BlindtestGenerator\";\r\n\r\nclass RoutingConfig extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div>\r\n                    <Route exact path=\"/\" component={Checkout}/>\r\n                    <Route exact path=\"/blindtest\" component={BlindtestGenerator}/>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RoutingConfig;","import './App.css';\r\nimport React from \"react\";\r\nimport RoutingConfig from \"./RoutingConfig\";\r\n\r\nfunction App() {\r\n  //Setting up default Values\r\n  window.localStorage.setItem('theme', 'games')\r\n  window.localStorage.setItem('playlist_size', '100')\r\n  window.localStorage.setItem('guess_time', '13')\r\n  window.localStorage.setItem('wait_time', '5')\r\n  window.localStorage.setItem('allow_same_licence', 'false')\r\n\r\n  return (<RoutingConfig />);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}